input {
  file {
		type => "StoreService"
        path => "F:/kibana/mikrologi/store_service.log"
        start_position => "beginning"
		codec => multiline {
		  pattern => "^%{TIMESTAMP_ISO8601}"
		  negate => true
		  what => "previous"
		}
       }
	file {
		type => "WarehouseService"
        path => "F:/kibana/mikrologi/warehouse_service.log"
        start_position => "beginning"
		codec => multiline {
		  pattern => "^%{TIMESTAMP_ISO8601}"
		  negate => true
		  what => "previous"
		}
       }
	file {
		type => "ProductService"
        path => "F:/kibana/mikrologi/product_service.log"
        start_position => "beginning"
		codec => multiline {
		  pattern => "^%{TIMESTAMP_ISO8601}"
		  negate => true
		  what => "previous"
		}
       }
}

filter {
    if [message] =~ "\tat" {
    grok {
      match => ["message", "^(\tat)"]
      add_tag => ["stacktrace"]
    }
  }

  #Grokking Spring Boot's default log format
  grok {
    match => [ "message", 
               "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- \[(?<thread>[A-Za-z0-9-]+)\] [A-Za-z0-9.]*\.(?<class>[A-Za-z0-9#_]+)\s*:\s+(?<logmessage>.*)",
               "message",
               "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- .+? :\s+(?<logmessage>.*)",
			   "message",
			   "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}) %{LOGLEVEL:level} %{NUMBER:pid} --- \[(?<thread>[A-Za-z0-9-]+)\] [A-Za-z0-9.]*\.(?<class>[A-Za-z0-9#_]+)\s*:\s+(?<logmessage>.*)"
             ]
  }

  #Parsing out timestamps which are in timestamp field thanks to previous grok section
  date {
    match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss.SSS" ]
  }
}
output {
  elasticsearch {
    hosts => "localhost:9200"
    index => "logstash-micro%{+YYYY.MM.dd}"
  }
}